<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smsm.mapper.ResumeMapper">
  <resultMap id="BaseResultMap" type="com.smsm.model.Resume">
    <id column="resume_id" jdbcType="VARCHAR" property="resumeId" />
    <result column="resume_name" jdbcType="VARCHAR" property="resumeName" />
    <result column="job_seeker_id" jdbcType="VARCHAR" property="jobSeekerId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="education" jdbcType="CHAR" property="education" />
    <result column="exception_job" jdbcType="VARCHAR" property="exceptionJob" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="job_exp" jdbcType="VARCHAR" property="jobExp" />
    <result column="exception_city" jdbcType="VARCHAR" property="exceptionCity" />
    <result column="exception_type" jdbcType="VARCHAR" property="exceptionType" />
    <result column="exception_salary" jdbcType="VARCHAR" property="exceptionSalary" />
    <result column="current_state" jdbcType="VARCHAR" property="currentState" />
    <result column="university" jdbcType="VARCHAR" property="university" />
    <result column="major" jdbcType="VARCHAR" property="major" />
    <result column="img_name" jdbcType="VARCHAR" property="imgName"/>
    <result column="start_time" jdbcType="VARCHAR" property="startTime" />
    <result column="end_time" jdbcType="VARCHAR" property="endTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.smsm.model.Resume">
    <result column="job_exp" jdbcType="LONGVARCHAR" property="jobExp" />
  </resultMap>
  <resultMap id="workHistory" type="com.smsm.model.WorkHistory">
    <id column="work_history_id" jdbcType="VARCHAR" property="workHistoryId"/>
    <result column="resume_id" jdbcType="VARCHAR" property="resumeId"/>
    <result column="company_name" jdbcType="VARCHAR" property="companyName"/>
    <result column="job_name" jdbcType="VARCHAR" property="jobName"/>
    <result column="begin_time_year" jdbcType="VARCHAR" property="beginTimeYear"/>
    <result column="begin_time_month" jdbcType="VARCHAR" property="beginTimeMonth"/>
    <result column="end_time_year" jdbcType="VARCHAR" property="endTimeYear"/>
    <result column="end_time_month" jdbcType="VARCHAR" property="endTimeMonth"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>

  </resultMap>

  <resultMap id="projectExpMap" type="com.smsm.model.ProjectExp">
  <id column="project_exp_id" jdbcType="VARCHAR" property="projectExpId"/>
  <result column="resume_id" jdbcType="VARCHAR" property="resumeId"/>
  <result column="project_exp_name" jdbcType="VARCHAR" property="projectExpName"/>
  <result column="project_exp_duty" jdbcType="VARCHAR" property="projectExpDuty"/>
  <result column="begin_time_year" jdbcType="VARCHAR" property="beginTimeYear"/>
  <result column="begin_time_month" jdbcType="VARCHAR" property="beginTimeMonth"/>
  <result column="end_time_year" jdbcType="VARCHAR" property="endTimeYear"/>
  <result column="end_time_month" jdbcType="VARCHAR" property="endTimeMonth"/>
  <result column="duty_content" jdbcType="VARCHAR" property="dutyContent"/>
  <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
</resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    resume_id, job_seeker_id, name, sex, age, phone, email, education, exception_job
  </sql>
  <sql id="Blob_Column_List">
    job_exp
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.smsm.model.ResumeExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from resume
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.smsm.model.ResumeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from resume
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from resume
    where resume_id = #{resumeId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from resume
    where resume_id = #{resumeId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.smsm.model.ResumeExample">
    delete from resume
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.smsm.model.Resume">
    insert into resume
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="resumeId != null">
        resume_id,
      </if>
      <if test="jobSeekerId != null">
        job_seeker_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="education != null">
        education,
      </if>
      <if test="exceptionJob != null">
        exception_job,
      </if>
      <if test="jobExp != null">
        job_exp,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="resumeId != null">
        #{resumeId,jdbcType=VARCHAR},
      </if>
      <if test="jobSeekerId != null">
        #{jobSeekerId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="education != null">
        #{education,jdbcType=CHAR},
      </if>
      <if test="exceptionJob != null">
        #{exceptionJob,jdbcType=VARCHAR},
      </if>
      <if test="jobExp != null">
        #{jobExp,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.smsm.model.ResumeExample" resultType="java.lang.Long">
    select count(*) from resume
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update resume
    set resume_id = #{record.resumeId,jdbcType=VARCHAR},
    job_seeker_id = #{record.jobSeekerId,jdbcType=VARCHAR},
    name = #{record.name,jdbcType=VARCHAR},
    sex = #{record.sex,jdbcType=CHAR},
    age = #{record.age,jdbcType=INTEGER},
    phone = #{record.phone,jdbcType=INTEGER},
    email = #{record.email,jdbcType=VARCHAR},
    education = #{record.education,jdbcType=CHAR},
    exception_job = #{record.exceptionJob,jdbcType=VARCHAR},
    job_exp = #{record.jobExp,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update resume
    set resume_id = #{record.resumeId,jdbcType=VARCHAR},
    job_seeker_id = #{record.jobSeekerId,jdbcType=VARCHAR},
    name = #{record.name,jdbcType=VARCHAR},
    sex = #{record.sex,jdbcType=CHAR},
    age = #{record.age,jdbcType=INTEGER},
    phone = #{record.phone,jdbcType=INTEGER},
    email = #{record.email,jdbcType=VARCHAR},
    education = #{record.education,jdbcType=CHAR},
    exception_job = #{record.exceptionJob,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.smsm.model.Resume">
    update resume
    <set>
      <if test="resumeName != null">
        resume_name = #{resumeName, jdbcType=VARCHAR} ,
      </if>
      <if test="jobSeekerId != null">
        job_seeker_id = #{jobSeekerId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="education != null">
        education = #{education,jdbcType=CHAR},
      </if>
      <if test="exceptionJob != null">
        exception_job = #{exceptionJob,jdbcType=VARCHAR},
      </if>
      <if test="jobExp != null">
        job_exp = #{jobExp,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where resume_id = #{resumeId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.smsm.model.Resume">
    update resume
    set job_seeker_id = #{jobSeekerId,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      age = #{age,jdbcType=INTEGER},
      phone = #{phone,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      education = #{education,jdbcType=CHAR},
      exception_job = #{exceptionJob,jdbcType=VARCHAR},
      job_exp = #{jobExp,jdbcType=LONGVARCHAR}
    where resume_id = #{resumeId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.smsm.model.Resume">
    update resume
    set job_seeker_id = #{jobSeekerId,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      age = #{age,jdbcType=INTEGER},
      phone = #{phone,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      education = #{education,jdbcType=CHAR},
      exception_job = #{exceptionJob,jdbcType=VARCHAR}
    where resume_id = #{resumeId,jdbcType=VARCHAR}
  </update>

  <update id="updateResume" parameterType="com.smsm.model.Resume">

  	update resume
  	set resume_name = #{resumeName},
  	name = #{name,jdbcType=VARCHAR},
  	sex = #{sex,jdbcType=CHAR},
      age = #{age,jdbcType=INTEGER},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      education = #{education,jdbcType=CHAR},
      exception_job = #{exceptionJob,jdbcType=VARCHAR},
      job_exp = #{jobExp,jdbcType=LONGVARCHAR},
      update_time = now()

      where resume_id = #{resumeId,jdbcType=VARCHAR}
  </update>

  <select id="selectResumeByUser" parameterType="com.smsm.model.User" resultMap="BaseResultMap">
  	SELECT *
	from resume
	where job_seeker_id = ( SELECT job_seeker_id
							from `user`
							where user_id = #{userId})
  </select>

  <delete id="deleteResume" parameterType="java.lang.String">
  	delete from resume
  	where resume_id = #{resumeId}
  </delete>
  <select id="selectResumeAll" parameterType="java.lang.String" resultMap="BaseResultMap">
  	select * from resume
  	where job_seeker_id =
  	(select job_seeker_id from job_seeker where user_id = #{userId})
  </select>
  <select id="selectResumeByIdZc" parameterType="java.lang.String" resultMap="BaseResultMap">
 	 select * from resume where resume_id = #{resumeId}
  </select>

  <select id="selectFirstResumeByUserId" parameterType="java.lang.String" resultMap="BaseResultMap">
  	SELECT *
	from resume
	where job_seeker_id = ( SELECT job_seeker_id
							from job_seeker
							where user_id = #{userId})
    limit 1
  </select>
  <insert id="insert" parameterType="com.smsm.model.Resume" useGeneratedKeys="true" keyProperty="resumeId">
    <selectKey resultType="String" keyProperty="resumeId" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into resume
    values ((select get_trans_num()),#{resumeName}, #{jobSeekerId}, #{name},
      #{sex}, #{age}, #{phone}, #{email},
      #{university},
      #{startTime},#{endTime},#{major},#{education},#{currentState}, #{jobExp},
      #{exceptionJob},#{exceptionCity},#{exceptionType},#{exceptionSalary},null,now(),now()
      )
  </insert>
  <update id="updateSelective" parameterType="com.smsm.model.Resume">
    update resume
    <trim prefix="set" suffixOverrides=",">
      <if test="record.resumeName != null">
        resume_name = #{record.resumeName,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=CHAR},
      </if>
      <if test="record.age != null">
        age = #{record.age,jdbcType=INTEGER},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=INTEGER},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.education != null">
        education = #{record.education,jdbcType=CHAR},
      </if>
      <if test="record.exceptionJob != null">
        exception_job = #{record.exceptionJob,jdbcType=VARCHAR},
      </if>
      <if test="record.jobExp != null">
        job_exp = #{record.jobExp,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.exceptionCity != null">
        exception_city = #{record.exceptionCity,jdbcType=VARCHAR},
      </if>
      <if test="record.exceptionType != null">
        exception_type = #{record.exceptionType,jdbcType=VARCHAR},
      </if>
      <if test="record.exceptionSalary != null">
        exception_salary = #{record.exceptionSalary,jdbcType=VARCHAR},
      </if>
      <if test="record.currentState != null">
        current_state = #{record.currentState,jdbcType=VARCHAR},
      </if>
      <if test="record.university != null">
        university = #{record.university,jdbcType=VARCHAR},
      </if>
      <if test="record.university != null">
        university = #{record.university,jdbcType=VARCHAR},
      </if>
      <if test="record.major != null">
        major = #{record.major,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=VARCHAR},
      </if>
      <if test="record.endTime != null">
      end_time = #{record.endTime,jdbcType=VARCHAR},
      </if>
    </trim>
    where job_seeker_id = #{record.jobSeekerId,jdbcType=VARCHAR}
  </update>

  <insert id="insertWorkHistory" parameterType="com.smsm.model.WorkHistory" useGeneratedKeys="true" keyProperty="workHistoryId">
    <selectKey resultType="String" keyProperty="workHistoryId" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into work_history
    values((select get_trans_num()),#{resumeId},#{companyName},#{jobName},#{beginTimeYear},
            #{beginTimeMonth},#{endTimeYear},#{endTimeMonth},now(),now())
  </insert>

  <update id="updateWorkHistory" parameterType="com.smsm.model.WorkHistory">
    update work_history
    <trim prefix="set" suffixOverrides=",">
      <if test="record.companyName != null">
        company_name = #{record.companyName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobName != null">
        job_name = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.beginTimeYear != null">
        begin_time_year = #{record.beginTimeYear,jdbcType=VARCHAR},
      </if>
      <if test="record.beginTimeMonth != null">
        begin_time_month = #{record.beginTimeMonth,jdbcType=VARCHAR},
      </if>
      <if test="record.endTimeYear != null">
        end_time_year = #{record.endTimeYear,jdbcType=VARCHAR},
      </if>
      <if test="record.endTimeMonth != null">
        end_time_month = #{record.endTimeMonth,jdbcType=VARCHAR},
      </if>
    </trim>
    where work_history_id = #{record.workHistoryId,jdbcType=VARCHAR}
  </update>

  <select id="selectWorkHisByResume" parameterType="java.lang.String" resultMap="workHistory">
    select *
    from work_history w
    where w.resume_id=#{resuemId}
  </select>

  <insert id="insertProjectExp" parameterType="com.smsm.model.ProjectExp">
    insert into project_exp
    values((select get_trans_num()),#{resumeId},#{projectExpName},#{projectExpDuty},#{beginTimeYear},
            #{beginTimeMonth},#{endTimeYear},#{endTimeMonth},#{dutyContent},now(),now())
  </insert>

  <select id="selectProExp" parameterType="java.lang.String" resultMap="projectExpMap">
    select *
    from project_exp p
    where p.resume_id=#{resumeId}
    order by update_time
  </select>

  <update id="updateProjectExp" parameterType="com.smsm.model.ProjectExp">
    update project_exp
    <trim prefix="set" suffixOverrides=",">
      <if test="projectExpName != null">
        project_exp_name = #{projectExpName,jdbcType=VARCHAR},
      </if>
      <if test="projectExpDuty != null">
        project_exp_duty = #{projectExpDuty,jdbcType=VARCHAR},
      </if>
      <if test="beginTimeYear != null">
        begin_time_year = #{beginTimeYear,jdbcType=VARCHAR},
      </if>
      <if test="beginTimeMonth != null">
        begin_time_month = #{beginTimeMonth,jdbcType=VARCHAR},
      </if>
      <if test="endTimeYear != null">
        end_time_year = #{endTimeYear,jdbcType=VARCHAR},
      </if>
      <if test="endTimeMonth != null">
        end_time_month = #{endTimeMonth,jdbcType=VARCHAR},
      </if>
      <if test="dutyContent != null">
        duty_content = #{dutyContent,jdbcType=VARCHAR},
      </if>
    </trim>
    WHERE project_exp_id=#{projectExpId}
  </update>

  <delete id="deleteProjectExp">
    delete from project_exp
    where project_exp_id=#{projectExpId}
  </delete>

  <delete id="deleteWorkHistory">
    delete from work_history
    where work_history_id=#{workHistoryId}
  </delete>

  <select id="selectResumesByToEmploy" resultMap="BaseResultMap" parameterType="java.lang.String">
    select *
    from resume
    where resume_id in (select resume_id from to_employ where recruitment_id in
    (select recruitment_id from recruitment where company_id=#{companyId}))
  </select>

  <update id="uploadImage" parameterType="java.lang.String">
    update resume
    set img_name = #{imgName}
    where job_seeker_id = (select job_seeker_id from job_seeker where user_id = #{userId})
  </update>
</mapper>